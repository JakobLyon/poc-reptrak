{"ast":null,"code":"var _jsxFileName = \"/Users/pbodduluri/ReactProjects/poc-reptrak-master/src/components/Grid/Cell.tsx\";\nimport React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { GridContext } from \"./Grid\";\nexport const justifySelfOptions = {\n  start: \"start\",\n  end: \"end\",\n  center: \"center\",\n  stretch: \"stretch\"\n};\nexport const stretchOptions = {\n  end: \"end\"\n};\nexport const Cell = ({\n  colStart,\n  colEnd,\n  rowStart,\n  rowEnd,\n  justifySelf,\n  children\n}) => {\n  const {\n    gridColumns,\n    gridRows\n  } = useContext(GridContext);\n  let gridColumn = `col${colStart}-start`;\n\n  if (colEnd === stretchOptions.end) {\n    gridColumn = `${gridColumn} / col${gridColumns}-end`;\n  } else if (colEnd) {\n    gridColumn = `${gridColumn} ${colEnd ? `/ col${colEnd}-start` : ''}`;\n  }\n\n  let gridRow = `row${rowStart}-start`;\n\n  if (rowEnd === stretchOptions.end) {\n    gridRow = `${gridRow} / row${gridRows}-end`;\n  } else if (rowEnd) {\n    gridRow = `${rowEnd ? ` / row${rowEnd}-start` : \"\"}`;\n  }\n\n  const Wrapper = styled.div`\n    grid-column: ${gridColumn};\n    grid-row: ${gridRow};\n    ${justifySelf ? `justify-self: ${justifySelf};` : \"\"}\n    border: 2px dotted red;\n  `;\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/pbodduluri/ReactProjects/poc-reptrak-master/src/components/Grid/Cell.tsx"],"names":["React","useContext","styled","GridContext","justifySelfOptions","start","end","center","stretch","stretchOptions","Cell","colStart","colEnd","rowStart","rowEnd","justifySelf","children","gridColumns","gridRows","gridColumn","gridRow","Wrapper","div"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,QAA5B;AAEA,OAAO,MAAMC,kBAAkB,GAAG;AAChCC,EAAAA,KAAK,EAAE,OADyB;AAEhCC,EAAAA,GAAG,EAAE,KAF2B;AAGhCC,EAAAA,MAAM,EAAE,QAHwB;AAIhCC,EAAAA,OAAO,EAAE;AAJuB,CAA3B;AAOP,OAAO,MAAMC,cAAc,GAAG;AAC5BH,EAAAA,GAAG,EAAE;AADuB,CAAvB;AAaP,OAAO,MAAMI,IAAI,GAAG,CAAC;AACnBC,EAAAA,QADmB;AAEnBC,EAAAA,MAFmB;AAGnBC,EAAAA,QAHmB;AAInBC,EAAAA,MAJmB;AAKnBC,EAAAA,WALmB;AAMnBC,EAAAA;AANmB,CAAD,KAOH;AACf,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA4BjB,UAAU,CAACE,WAAD,CAA5C;AAEA,MAAIgB,UAAU,GAAI,MAAKR,QAAS,QAAhC;;AACA,MAAIC,MAAM,KAAKH,cAAc,CAACH,GAA9B,EAAmC;AACjCa,IAAAA,UAAU,GAAI,GAAEA,UAAW,SAAQF,WAAY,MAA/C;AACD,GAFD,MAEO,IAAIL,MAAJ,EAAY;AACjBO,IAAAA,UAAU,GAAI,GAAEA,UAAW,IAAGP,MAAM,GAAI,QAAOA,MAAO,QAAlB,GAA4B,EAAG,EAAnE;AACD;;AAED,MAAIQ,OAAO,GAAI,MAAKP,QAAS,QAA7B;;AACA,MAAIC,MAAM,KAAKL,cAAc,CAACH,GAA9B,EAAmC;AACjCc,IAAAA,OAAO,GAAI,GAAEA,OAAQ,SAAQF,QAAS,MAAtC;AACD,GAFD,MAEO,IAAIJ,MAAJ,EAAY;AACjBM,IAAAA,OAAO,GAAI,GAAEN,MAAM,GAAI,SAAQA,MAAO,QAAnB,GAA6B,EAAG,EAAnD;AACD;;AAED,QAAMO,OAAO,GAAGnB,MAAM,CAACoB,GAAI;mBACVH,UAAW;gBACdC,OAAQ;MAClBL,WAAW,GAAI,iBAAgBA,WAAY,GAAhC,GAAqC,EAAG;;GAHvD;AAOA,SAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUC,QAAV,CAAP;AACD,CAhCM","sourcesContent":["import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { GridContext } from \"./Grid\";\n\nexport const justifySelfOptions = {\n  start: \"start\",\n  end: \"end\",\n  center: \"center\",\n  stretch: \"stretch\"\n}\n\nexport const stretchOptions = {\n  end: \"end\"\n}\n\ntype CellProps = {\n  colStart: string | number;\n  colEnd?: string | number | \"end\";\n  rowStart: string | number;\n  rowEnd?: string | number | \"end\";\n  justifySelf: \"start\" | \"end\" | \"center\" | \"stretch\";\n  children: Node;\n};\n\nexport const Cell = ({\n  colStart,\n  colEnd,\n  rowStart,\n  rowEnd,\n  justifySelf,\n  children\n}: CellProps) => {\n  const { gridColumns, gridRows } = useContext(GridContext);\n\n  let gridColumn = `col${colStart}-start`;\n  if (colEnd === stretchOptions.end) {\n    gridColumn = `${gridColumn} / col${gridColumns}-end`;\n  } else if (colEnd) {\n    gridColumn = `${gridColumn} ${colEnd ? `/ col${colEnd}-start` : ''}`;\n  }\n\n  let gridRow = `row${rowStart}-start`;\n  if (rowEnd === stretchOptions.end) {\n    gridRow = `${gridRow} / row${gridRows}-end`;\n  } else if (rowEnd) {\n    gridRow = `${rowEnd ? ` / row${rowEnd}-start` : \"\"}`;\n  }\n\n  const Wrapper = styled.div`\n    grid-column: ${gridColumn};\n    grid-row: ${gridRow};\n    ${justifySelf ? `justify-self: ${justifySelf};` : \"\"}\n    border: 2px dotted red;\n  `;\n\n  return <Wrapper>{children}</Wrapper>;\n};\n"]},"metadata":{},"sourceType":"module"}